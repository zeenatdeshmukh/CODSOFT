# -*- coding: utf-8 -*-
"""IMDb Movie Prediction Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Iz-KEpZaqFmrxzpRPJCR9sOQfdVmXHD5
"""

# Importing required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

# Load the IMDb movie dataset
file_path = 'IMDb Movies India.csv'
movies_df = pd.read_csv(file_path, encoding='latin1')

# Data Exploration
print("Dataset shape:", movies_df.shape)
print("First few rows of the dataset:\n", movies_df.head())

# Check the actual column names in your DataFrame
print(movies_df.columns)

# Data Preprocessing
# Drop any rows with missing ratings
movies_df.dropna(subset=['Rating'], inplace=True)

# Select only relevant features (assuming 'rating' is the target variable)
# Adjust these column names to match your dataset's structure, if needed
movies_df = movies_df[['Genre', 'Director', 'Actor 1', 'Rating']]

# Fill any missing values in genre, director, and actors columns
movies_df['Genre'].fillna('Unknown', inplace=True)
movies_df['Director'].fillna('Unknown', inplace=True)
movies_df['Actor 1'].fillna('Unknown', inplace=True)

# Feature Engineering
# Encoding categorical features using OneHotEncoder for genre, director, and actors
# LabelEncoder for target variable rating if it has categories
X = movies_df[['Genre', 'Director', 'Actor 1']]
y = movies_df['Rating']

# Use ColumnTransformer to apply transformations only on categorical features
preprocessor = ColumnTransformer(
    transformers=[
        ('Genre', OneHotEncoder(handle_unknown='ignore'), ['Genre']),
        ('Director', OneHotEncoder(handle_unknown='ignore'), ['Director']),
        ('Actor 1', OneHotEncoder(handle_unknown='ignore'), ['Actor 1']),
    ],
    remainder='passthrough'
)

# Build a pipeline with preprocessor and the model
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('scaler', StandardScaler(with_mean=False)),
    ('regressor', LinearRegression())
])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
pipeline.fit(X_train, y_train)

# Make predictions on the test set
y_pred = pipeline.predict(X_test)

# Model Evaluation
mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("R-squared (R2) Score:", r2)